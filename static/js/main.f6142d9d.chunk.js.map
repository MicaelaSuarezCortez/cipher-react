{"version":3,"sources":["components/ButtonEncode.jsx","components/ButtonDecode.jsx","components/Form.jsx","App.js","serviceWorker.js","index.js"],"names":["ButtonEncode","props","onClick","dataEncode","className","ButtonDecode","dataDecode","Form","createRefInputText","React","createRef","createRefInputOffset","e","preventDefault","valueInput","current","value","valueOffset","encode","decode","type","placeholder","ref","this","id","htmlFor","resultado","offset","Component","App","string","arrayText","inputText","inputOffset","parseInt","i","length","position","charCodeAt","asciiToChar","String","fromCharCode","push","setState","texto","state","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6142d9d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst ButtonEncode = (props) => {\r\n    return(\r\n        <button onClick= {props.dataEncode} className=\"btn btn-success mr-3  btn-lg button\">Cifrar</button>\r\n    )\r\n}\r\nexport default ButtonEncode","import React from 'react'\r\n\r\nconst ButtonDecode = (props) => {\r\n    return(\r\n        <button onClick = {props.dataDecode} className=\"btn btn-success btn-lg button\">Descifrar</button>\r\n    )\r\n}\r\nexport default ButtonDecode","import React, { Component } from 'react'\r\n\r\nimport ButtonEncode from './ButtonEncode'\r\nimport ButtonDecode from './ButtonDecode';\r\n\r\n\r\nclass Form extends Component {\r\n\r\n    createRefInputText = React.createRef();\r\n    createRefInputOffset = React.createRef();\r\n\r\n    dataEncode = (e) => {\r\n        e.preventDefault();\r\n        const valueInput = this.createRefInputText.current.value;\r\n        const valueOffset = this.createRefInputOffset.current.value;\r\n        this.props.encode(valueOffset, valueInput)       \r\n    }\r\n\r\n    dataDecode = (e) => {\r\n        e.preventDefault();\r\n        const valueInput = this.createRefInputText.current.value;\r\n        const valueOffset = this.createRefInputOffset.current.value;\r\n        this.props.decode(valueOffset, valueInput)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <div className=\"col-md-6 mx-auto my-3\">\r\n                        <input type=\"text\" placeholder=\"Ingrese aquí n° de historia clínica\" className=\"form-control\"/>\r\n                    </div>\r\n                    <div className=\"col-md-6 mx-auto\">\r\n                        <input ref={this.createRefInputText} placeholder=\"Ingrese texto para cifrar la historia\" className=\"form-control \" type=\"text\" id=\"inputText\" />\r\n                    </div>\r\n                    <div className=\"col-md-2 mx-auto my-3\">\r\n                        <input ref = {this.createRefInputOffset} placeholder=\"N°\" type=\"number\" className=\"form-control\" />\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                    <ButtonEncode \r\n                   dataEncode = {this.dataEncode}                   \r\n                    />\r\n                    <ButtonDecode                     \r\n                    dataDecode = {this.dataDecode}\r\n                    />                  \r\n                        \r\n                    </div>\r\n                    <div className=\"text-justify my-3\">\r\n                        <label htmlFor=\"inputText\" className=\"d-block label\">Historia clínica: {this.props.resultado}</label>\r\n                        <label htmlFor=\"inputText\" className=\"d-block label\">Key: {this.props.offset}</label>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form","import React, {Component} from 'react';\r\nimport Form from './components/Form'\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      offset: '',\r\n      texto: '',    \r\n      resultado: []\r\n    }\r\n  }\r\n\r\n  encode = (offset, string) => {\r\n    let arrayText = [];\r\n    let inputText = string;\r\n    let inputOffset = parseInt(offset);   \r\n    \r\n    for (let i = 0; i < inputText.length; i++) {     \r\n      let charCodeToAscii = inputText[i].charCodeAt();           \r\n      let position = (charCodeToAscii - 65 + inputOffset) % 26 + 65; \r\n      let asciiToChar = String.fromCharCode(position)\r\n       arrayText.push(asciiToChar);          \r\n       \r\n\r\n      this.setState({\r\n        texto: inputText,\r\n        offset:inputOffset,\r\n        resultado: arrayText \r\n      })\r\n  \r\n    }        \r\n  } \r\n  \r\n  decode = (offset, string) => {\r\n    let arrayText = [];\r\n    let inputText = string;\r\n    let inputOffset = parseInt(offset);\r\n\r\n    for (let i = 0; i < inputText.length; i++) {\r\n      let charCodeToAscii = inputText[i].charCodeAt(); \r\n      let position = (charCodeToAscii - 90 - inputOffset) % 26 + 90;     \r\n      let asciiToChar = String.fromCharCode(position)\r\n      arrayText.push(asciiToChar);    \r\n     \r\n      this.setState({\r\n        texto: inputText,\r\n        offset:inputOffset,\r\n        resultado: arrayText \r\n      })\r\n    }\r\n  }\r\n  render(){\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className = \"row\">\r\n            <div className=\"col-xs-12 col-sm-2 aside\">\r\n              <figure>\r\n                <img src=\"https://user-images.githubusercontent.com/45082005/69830939-2134f580-11f5-11ea-8dd4-977b53d83165.png\" alt=\"logo\" className=\"image\"/>\r\n                <span className=\"frase text-center d-block\">\r\n                  GOOD HOSPITAL\r\n                </span>\r\n              </figure>            \r\n            </div>\r\n            <div className=\"col-xs-12 col-sm-9\">\r\n              <header className=\"mx-auto text-center\">               \r\n                <h2 className=\"header my-4\">\r\n                Repositorio de Historias Clínicas\r\n                </h2>\r\n                <figure>\r\n                  <img  src=\"https://user-images.githubusercontent.com/45082005/69832301-77a53280-11fb-11ea-88dc-991499006afb.PNG\" alt=\"portada\" />\r\n                </figure>\r\n              </header>\r\n              <Form \r\n              encode = {this.encode}  \r\n              decode = {this.decode} \r\n              resultado = {this.state.resultado}  \r\n              offset = {this.state.offset}\r\n              />  \r\n            </div>\r\n        </div>    \r\n        <footer className=\"row\">\r\n              <div>\r\n\r\n              </div>\r\n        </footer>   \r\n      </div>     \r\n    )\r\n  } \r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}